generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id          Int       @id @default(autoincrement())
  userName    String?
  phoneNumber String?   @unique
  email       String    @unique
  createdAt   DateTime  @default(now())
  updateAt    DateTime  @updatedAt
  deletedAt   DateTime?
  jwtPassword String?
  Employee    Employee?

  @@fulltext([userName, phoneNumber, email])
}

model RentalUnits {
  id                Int                  @id @default(autoincrement())
  createdAt         DateTime             @default(now())
  updateAt          DateTime             @updatedAt
  deletedAt         DateTime?
  floor             String
  kareMeter         Float                @default(0)
  price             Float                @default(0)
  buildingId        Int?
  maximumTenants    Int
  minimumRentalDate Int
  roomNumber        String
  unitType          RentalUnits_unitType
  Tenants           Tenants[]

  @@index([buildingId])
}

model Tenants {
  id                          Int          @id @default(autoincrement())
  createdAt                   DateTime     @default(now())
  updateAt                    DateTime     @updatedAt
  deletedAt                   DateTime?
  fullName                    String       @default("name")
  phoneNumber                 String
  purposeOfRent               String
  contractStartDate           DateTime?
  contractEndDate             DateTime?
  rentalUnitsId               Int
  durationOfStayInCountry     Int
  email                       String
  emergencyContactName        String
  emergencyContactPhoneNumber String
  tenantScore                 Int          @default(0)
  active                      Boolean      @default(true)
  RentalUnits                 RentalUnits? @relation(fields: [rentalUnitsId], references: [id])
  Receipts                    Receipts[]

  @@index([rentalUnitsId])
}

model Receipts {
  id                Int       @id @default(autoincrement())
  createdAt         DateTime  @default(now())
  updateAt          DateTime  @updatedAt
  deletedAt         DateTime?
  startDate         DateTime
  endDate           DateTime
  receiptReceived   Boolean   @default(false)
  receiptReceivedOn DateTime?
  paymentConfirmed  Boolean   @default(false)
  amount            Float
  bankName          String
  tenantsId         Int?
  Tenants           Tenants?  @relation(fields: [tenantsId], references: [id])

  @@index([tenantsId])
}

model Employee {
  id             Int                     @id @default(autoincrement())
  hiredDate      DateTime
  isSuspended    Boolean
  userId         Int                     @unique
  roleId         Int
  createdAt      DateTime                @default(now())
  updateAt       DateTime                @updatedAt
  deletedAt      DateTime?
  isFired        Boolean                 @default(false)
  address        String
  dateOfBirth    DateTime?
  staffIdNumber  String
  EmployeeStatus Employee_EmployeeStatus @default(FULL_TIME)
  bloodType      String                  @default("O+")
  department     String                  @default("employee")
  height         Float                   @default(0)
  image          String?
  jobTitle       String                  @default("employee")
  isAbsent       Boolean                 @default(false)
  onLeave        Boolean                 @default(false)
  User           User                    @relation(fields: [userId], references: [id])
  Role           Role                    @relation(fields: [roleId], references: [id])
  Suspensions    Suspended[]
  Fired          Fired[]

  @@index([roleId])
  @@index([userId])
}

model Suspended {
  id           Int       @id @default(autoincrement())
  employeeId   Int
  startingDate DateTime
  endDate      DateTime
  description  String
  createdAt    DateTime  @default(now())
  updateAt     DateTime  @updatedAt
  deletedAt    DateTime?
  Employee     Employee  @relation(fields: [employeeId], references: [id])

  @@index([employeeId])
}

model Fired {
  id          Int       @id @default(autoincrement())
  employeeId  Int
  firedDate   DateTime
  description String
  createdAt   DateTime  @default(now())
  updateAt    DateTime  @updatedAt
  deletedAt   DateTime?
  employee    Employee  @relation(fields: [employeeId], references: [id])

  @@index([employeeId])
}

model Role {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String     @db.VarChar(500)
  createdAt   DateTime   @default(now())
  updateAt    DateTime   @updatedAt
  deletedAt   DateTime?
  Employees   Employee[]
  Scopes      Scope[]
}

model Scope {
  id     Int    @id @default(autoincrement())
  name   String
  roleId Int
  Role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@index([roleId])
}

model Attendance {
  id           Int       @id @default(autoincrement())
  startingDate DateTime
  endDate      DateTime
  description  String
  createdAt    DateTime  @default(now())
  updateAt     DateTime
  deletedAt    DateTime?
  employeeId   Int

  @@index([employeeId])
}

model Leaves {
  id           Int       @id @default(autoincrement())
  startingDate DateTime
  endDate      DateTime
  description  String
  createdAt    DateTime  @default(now())
  updateAt     DateTime
  deletedAt    DateTime?
  employeeId   Int
  creatorId    Int

  @@index([creatorId])
  @@index([employeeId])
}

model Building {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())
  updateAt      DateTime
  deletedAt     DateTime?
  name          String    @unique
  location      String
  numberofUnits Int
}

model BuildingAmenities {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updateAt    DateTime
  deletedAt   DateTime?
  name        String
  description String
  buildingId  Int?
  paid        Boolean   @default(false)
  price       Float

  @@index([buildingId])
}

model File {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?
  fileName  String
  key       String
}

model Inspection {
  id               Int                         @id @default(autoincrement())
  createdAt        DateTime                    @default(now())
  updateAt         DateTime
  deletedAt        DateTime?
  inspectionDate   DateTime
  description      String
  InspectionStatus Inspection_InspectionStatus
  rentalUnitsId    Int?

  @@index([rentalUnitsId])
}

model Payment {
  id               Int       @id @default(autoincrement())
  createdAt        DateTime  @default(now())
  updateAt         DateTime
  deletedAt        DateTime?
  amount           Float
  despositedToBank String
  paidOn           DateTime?
  vendorTaskId     Int?

  @@index([vendorTaskId])
}

model PaymentFile {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?
  fileId    Int       @unique
  paymentId Int

  @@index([fileId])
  @@index([paymentId])
}

model ReceiptsFile {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime?
  deletedAt  DateTime?
  fileId     Int       @unique
  receiptsId Int

  @@index([fileId])
  @@index([receiptsId])
}

model TaskFile {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?
  fileId    Int       @unique
  taskId    Int

  @@index([fileId])
  @@index([taskId])
}

model TenantsFile {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?
  fileId    Int       @unique
  tenantsId Int

  @@index([fileId])
  @@index([tenantsId])
}

model UnitAmenities {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())
  updateAt      DateTime
  deletedAt     DateTime?
  name          String
  description   String
  rentalUnitsId Int?
  paid          Boolean   @default(false)
  price         Float

  @@index([rentalUnitsId])
}

model UnitProperty {
  id             Int                         @id @default(autoincrement())
  createdAt      DateTime                    @default(now())
  updateAt       DateTime
  deletedAt      DateTime?
  name           String
  description    String
  rentalUnitsId  Int?
  propertyStatus UnitProperty_propertyStatus
  numberofUnits  Int

  @@index([rentalUnitsId])
}

model UnitsFile {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime?
  deletedAt    DateTime?
  fileId       Int       @unique
  rentalUnitId Int

  @@index([fileId])
  @@index([rentalUnitId])
}

model Vendor {
  id                 Int                @id @default(autoincrement())
  createdAt          DateTime           @default(now())
  updateAt           DateTime
  deletedAt          DateTime?
  name               String
  phoneNumber        String
  email              String
  address            String
  serviceDescription String
  serviceType        Vendor_serviceType
  bankName           String
  bankAccount        String
  swiftCode          String
  iban               String
}

model VendorFile {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?
  fileId    Int       @unique
  vendorId  Int

  @@index([fileId])
  @@index([vendorId])
}

model VendorTask {
  id                      Int                   @id @default(autoincrement())
  createdAt               DateTime              @default(now())
  updateAt                DateTime
  deletedAt               DateTime?
  taskDescription         String
  paymentStatus           Boolean               @default(false)
  paymentTerms            String
  taskStatus              VendorTask_taskStatus
  regularJob              Boolean
  estimatedTimeToComplete String
  vendorId                Int?

  @@index([vendorId])
}

enum UnitProperty_propertyStatus {
  DAMAGED
  NEEDS_REPAIR
  MISSING_ITEMS
  GOOD_CONDITION
}

enum VendorTask_taskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum Vendor_serviceType {
  CLEANING
  ELECTRICITY
  PLUMBING
  PAINTING
  SECURITY
}

enum Inspection_InspectionStatus {
  NEEDS_REPAIR
  OUT_OF_SERVICE
  GOOD_CONDITION
}

enum RentalUnits_unitType {
  COMMERCIAL
  RESIDENTIAL
}

enum Employee_EmployeeStatus {
  FULL_TIME
  PART_TIME
  TEMPORARY
}
