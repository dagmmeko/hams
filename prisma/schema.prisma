generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model File {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime?
  deletedAt    DateTime?
  fileName     String
  key          String
  PaymentFile  PaymentFile?
  TaskFile     TaskFile?
  VendorFile   VendorFile?
  ReceiptsFile ReceiptsFile?
  TenantsFile  TenantsFile?
  UnitsFile    UnitsFile?
}

model User {
  id          Int        @id @default(autoincrement())
  userName    String?
  phoneNumber String?    @unique
  email       String     @unique
  createdAt   DateTime   @default(now())
  updateAt    DateTime   @updatedAt
  deletedAt   DateTime?
  jwtPassword String?
  Employee    Employee?
  Manager     Employee[] @relation("manager")

  @@fulltext([userName, phoneNumber, email])
}

model Building {
  id                Int                 @id @default(autoincrement())
  createdAt         DateTime            @default(now())
  updateAt          DateTime            @updatedAt
  deletedAt         DateTime?
  name              String              @unique
  location          String
  numberofUnits     Int
  RentalUnits       RentalUnits[]
  BuildingAmenities BuildingAmenities[]
}

model BuildingAmenities {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updateAt    DateTime  @updatedAt
  deletedAt   DateTime?
  name        String
  description String
  buildingId  Int?
  paid        Boolean   @default(false)
  price       Float
  Building    Building? @relation(fields: [buildingId], references: [id])

  @@index([buildingId])
}

model RentalUnits {
  id                     Int               @id @default(autoincrement())
  createdAt              DateTime          @default(now())
  updateAt               DateTime          @updatedAt
  deletedAt              DateTime?
  floor                  String
  kareMeter              Float             @default(0)
  price                  Float             @default(0)
  priceSetPerKare        Boolean           @default(false)
  buildingId             Int?
  maximumTenants         Int
  minimumRentalDate      Int
  roomNumber             String
  unitType               UnitType
  currency               Currency          @default(USD)
  active                 Boolean           @default(false)
  latestInspectionStatus InspectionStatus?
  Inspections            Inspection[]
  Property               UnitProperty[]
  Amenities              UnitAmenities[]
  Building               Building?         @relation(fields: [buildingId], references: [id])
  UnitsFile              UnitsFile[]
  PriceChange            PriceChange[]
  TenantRental           TenantRental[]
  Receipts               Receipts[]

  @@index([buildingId])
}

model PriceChange {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now())
  updateAt    DateTime    @updatedAt
  deletedAt   DateTime?
  price       Float
  unitId      Int
  tenantId    Int
  active      Boolean?
  approved    Boolean?
  Tenant      Tenants     @relation(fields: [tenantId], references: [id])
  RentalUnits RentalUnits @relation(fields: [unitId], references: [id])

  @@index([unitId])
  @@index([tenantId])
}

model UnitsFile {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime?
  deletedAt    DateTime?
  fileId       Int         @unique
  rentalUnitId Int
  RentalUnits  RentalUnits @relation(fields: [rentalUnitId], references: [id])
  File         File        @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@index([rentalUnitId])
  @@index([fileId])
}

model UnitAmenities {
  id            Int          @id @default(autoincrement())
  createdAt     DateTime     @default(now())
  updateAt      DateTime     @updatedAt
  deletedAt     DateTime?
  name          String
  description   String
  rentalUnitsId Int?
  paid          Boolean      @default(false)
  price         Float
  RentalUnits   RentalUnits? @relation(fields: [rentalUnitsId], references: [id])

  @@index([rentalUnitsId])
}

model UnitProperty {
  id             Int            @id @default(autoincrement())
  createdAt      DateTime       @default(now())
  updateAt       DateTime       @updatedAt
  deletedAt      DateTime?
  name           String
  description    String
  rentalUnitsId  Int?
  available      Boolean        @default(false)
  itemsPrice     Float          @default(0)
  itemCategory   ItemsCategory?
  propertyStatus PropertyStatus
  numberofUnits  Int
  RentalUnits    RentalUnits?   @relation(fields: [rentalUnitsId], references: [id])

  @@index([rentalUnitsId])
}

model Inspection {
  id               Int              @id @default(autoincrement())
  createdAt        DateTime         @default(now())
  updateAt         DateTime         @updatedAt
  deletedAt        DateTime?
  inspectionDate   DateTime
  description      String
  InspectionStatus InspectionStatus
  rentalUnitsId    Int?
  RentalUnits      RentalUnits?     @relation(fields: [rentalUnitsId], references: [id])

  @@index([rentalUnitsId])
}

model Tenants {
  id                          Int            @id @default(autoincrement())
  createdAt                   DateTime       @default(now())
  updateAt                    DateTime       @updatedAt
  deletedAt                   DateTime?
  fullName                    String         @default("name")
  phoneNumber                 String
  email                       String?
  passportNumber              String?
  emergencyContactName        String?
  emergencyContactPhoneNumber String?
  tenantScore                 Int            @default(0)
  emergencyContactEmail       String?
  Receipts                    Receipts[]
  TenantsFile                 TenantsFile[]
  PriceChange                 PriceChange[]
  TenantRental                TenantRental[]
}

model TenantRental {
  id                      Int         @id @default(autoincrement())
  createdAt               DateTime    @default(now())
  updatedAt               DateTime?
  deletedAt               DateTime?
  tenantId                Int
  unitId                  Int
  contractEndDate         DateTime?
  contractStartDate       DateTime?
  companyName             String      @default("company Name")
  active                  Boolean     @default(false)
  durationOfStayInCountry Int?
  purposeOfRent           String?
  Tenants                 Tenants     @relation(fields: [tenantId], references: [id])
  RentalUnits             RentalUnits @relation(fields: [unitId], references: [id])

  @@index([tenantId])
  @@index([unitId])
}

model TenantsFile {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?
  fileId    Int       @unique
  tenantsId Int
  Tenants   Tenants   @relation(fields: [tenantsId], references: [id])
  File      File      @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@index([tenantsId])
  @@index([fileId])
}

model Receipts {
  id                     Int            @id @default(autoincrement())
  createdAt              DateTime       @default(now())
  updateAt               DateTime       @updatedAt
  deletedAt              DateTime?
  startDate              DateTime
  endDate                DateTime
  receiptReceived        Boolean        @default(false)
  receiptReceivedOn      DateTime?
  paymentConfirmed       Boolean        @default(false)
  isRentPayment          Boolean        @default(false)
  amount                 Float
  bankName               String
  paymentReason          String?
  receiptReferenceNumber String?
  tenantsId              Int?
  payToUnitId            Int?
  PayToUnit              RentalUnits?   @relation(fields: [payToUnitId], references: [id])
  Tenants                Tenants?       @relation(fields: [tenantsId], references: [id])
  ReceiptsFile           ReceiptsFile[]

  @@index([tenantsId])
  @@index([payToUnitId])
}

model ReceiptsFile {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime?
  deletedAt  DateTime?
  fileId     Int       @unique
  receiptsId Int
  Receipts   Receipts  @relation(fields: [receiptsId], references: [id])
  File       File      @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@index([receiptsId])
  @@index([fileId])
}

model Employee {
  id              Int             @id @default(autoincrement())
  hiredDate       DateTime
  isSuspended     Boolean
  userId          Int             @unique
  roleId          Int
  createdAt       DateTime        @default(now())
  updateAt        DateTime        @updatedAt
  deletedAt       DateTime?
  isFired         Boolean         @default(false)
  address         String
  dateOfBirth     DateTime?
  staffIdNumber   String
  bloodType       String          @default("O+")
  height          Float           @default(0)
  image           String?
  jobTitle        String          @default("employee")
  isAbsent        Boolean         @default(false)
  onLeave         Boolean         @default(false)
  managerUserId   Int?
  EmploymentType  EmploymentType?
  User            User            @relation(fields: [userId], references: [id])
  Role            Role            @relation(fields: [roleId], references: [id])
  Manager         User?           @relation("manager", fields: [managerUserId], references: [id])
  Suspensions     Suspended[]
  Fired           Fired[]
  Attendance      Attendance[]
  ApprovedBy      Leaves[]        @relation("aprrovedBy")
  EmployeesLeaves Leaves[]        @relation("takenBy")

  @@index([roleId])
  @@index([userId])
  @@index([managerUserId])
}

model Leaves {
  id           Int       @id @default(autoincrement())
  startingDate DateTime
  endDate      DateTime
  description  String
  createdAt    DateTime  @default(now())
  updateAt     DateTime  @updatedAt
  deletedAt    DateTime?
  employeeId   Int
  creatorId    Int
  Employee     Employee  @relation("takenBy", fields: [employeeId], references: [id])
  ApprovedBy   Employee  @relation("aprrovedBy", fields: [creatorId], references: [id])

  @@index([employeeId])
  @@index([creatorId])
}

model Attendance {
  id          Int       @id @default(autoincrement())
  description String
  createdAt   DateTime  @default(now())
  updateAt    DateTime  @updatedAt
  deletedAt   DateTime?
  employeeId  Int
  Employee    Employee  @relation(fields: [employeeId], references: [id])

  @@index([employeeId])
}

model Suspended {
  id           Int       @id @default(autoincrement())
  employeeId   Int
  startingDate DateTime
  endDate      DateTime
  description  String
  createdAt    DateTime  @default(now())
  updateAt     DateTime  @updatedAt
  deletedAt    DateTime?
  Employee     Employee  @relation(fields: [employeeId], references: [id])

  @@index([employeeId])
}

model Fired {
  id          Int       @id @default(autoincrement())
  employeeId  Int
  firedDate   DateTime
  description String
  createdAt   DateTime  @default(now())
  updateAt    DateTime  @updatedAt
  deletedAt   DateTime?
  employee    Employee  @relation(fields: [employeeId], references: [id])

  @@index([employeeId])
}

model Role {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String     @db.VarChar(500)
  createdAt   DateTime   @default(now())
  updateAt    DateTime   @updatedAt
  deletedAt   DateTime?
  Employees   Employee[]
  Scopes      Scope[]
}

model Scope {
  id     Int    @id @default(autoincrement())
  name   String
  roleId Int
  Role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@index([roleId])
}

model Vendor {
  id                 Int          @id @default(autoincrement())
  createdAt          DateTime     @default(now())
  updateAt           DateTime     @updatedAt
  deletedAt          DateTime?
  name               String
  phoneNumber        String
  email              String
  address            String
  serviceDescription String
  serviceType        ServiceType
  score              String
  VendorTask         VendorTask[]
  VendorFile         VendorFile[]
}

model VendorFile {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?
  fileId    Int       @unique
  vendorId  Int
  Vendor    Vendor    @relation(fields: [vendorId], references: [id])
  File      File      @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@index([vendorId])
  @@index([fileId])
}

model VendorTask {
  id                      Int        @id @default(autoincrement())
  createdAt               DateTime   @default(now())
  updateAt                DateTime   @updatedAt
  deletedAt               DateTime?
  taskDescription         String
  paymentStatus           Boolean    @default(false)
  paymentTerms            String
  taskStatus              TaskStatus
  regularJob              Boolean
  estimatedTimeToComplete String
  vendorId                Int?
  dueDate                 DateTime
  Vendor                  Vendor?    @relation(fields: [vendorId], references: [id])
  Payment                 Payment[]
  TaskFile                TaskFile[]

  @@index([vendorId])
}

model TaskFile {
  id         Int        @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime?
  deletedAt  DateTime?
  fileId     Int        @unique
  taskId     Int
  VendorTask VendorTask @relation(fields: [taskId], references: [id])
  File       File       @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([fileId])
}

model Payment {
  id               Int           @id @default(autoincrement())
  createdAt        DateTime      @default(now())
  updateAt         DateTime      @updatedAt
  deletedAt        DateTime?
  amount           Float
  despositedToBank String
  paidOn           DateTime?
  vendorTaskId     Int?
  VendorTask       VendorTask?   @relation(fields: [vendorTaskId], references: [id])
  PaymentFile      PaymentFile[]

  @@index([vendorTaskId])
}

model PaymentFile {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?
  fileId    Int       @unique
  paymentId Int
  Payment   Payment   @relation(fields: [paymentId], references: [id])
  File      File      @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@index([paymentId])
  @@index([fileId])
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  TEMPORARY
}

enum UnitType {
  COMMERCIAL
  RESIDENTIAL
}

enum InspectionStatus {
  NEEDS_REPAIR
  OUT_OF_SERVICE
  GOOD_CONDITION
}

enum PropertyStatus {
  DAMAGED
  NEEDS_REPAIR
  MISSING_ITEMS
  GOOD_CONDITION
}

enum ServiceType {
  CLEANING
  ELECTRICITY
  PLUMBING
  PAINTING
  SECURITY
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum ItemsCategory {
  SALON
  KITCHEN
  BATHROOM
  BEDROOM
  LAUNDRY
}

enum Currency {
  USD
  ETB
}
